\import Algebra.Meta
\import Algebra.Ring.Localization
\import Confluence
\import Data.Bool
\import Data.List (!!, ++, ++-assoc, ++_nil, ::, List, length, nil)
\import Data.Maybe
\import Data.Or
\import Function.Meta (repeat)
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import TRS.Data.Fin
\import TRS.Data.Shifts
\import TRS.Data.SubList
\import TRS.HRS
\import TRS.Linearity
\import TRS.Maybe
\import TRS.MetaContexts
\import TRS.Substitutions
\import TRS.Union.Confluence
\import TRS.Union.Embedding
\import TRS.Union.TopLevel
\import TRS.Utils

\func JointFSignature {Sort : \Set} (A B : FSignature Sort) : FSignature Sort \cowith
  | symbol s => A.symbol s `Or` B.symbol s
  | domain symb => \case \elim symb \with {
    | inl a => A.domain a
    | inr b => B.domain b
  }

\func JointIndexedSet {A : \Type} (L R : IndexedSet A) : IndexedSet A \cowith
  | J => L.J `Or` R.J
  | get x => \case \elim x \with {
    | inl a => L.get a
    | inr b => R.get b
  }

\module Injections \where {
  \func inject-term-left {Sort : \Set}
                         (envL envR : FSignature Sort)
                         {s : Sort} {c : List Sort} {mc : MetaContext Sort}
                         (term : Term envL c s mc) : Term (JointFSignature envL envR) c s mc \elim term
    | var index p => var index p
    | metavar m arguments => metavar m (\lam i => inject-term-left envL envR (arguments i))
    | func f arguments => func (inl f) (\lam i => inject-term-left envL envR (arguments i))

  \func inject-term-right {Sort : \Set}
                          (envL envR : FSignature Sort)
                          {s : Sort}
                          {c : List Sort}
                          {mc : MetaContext Sort}
                          (term : Term envR c s mc) : Term (JointFSignature envL envR) c s mc \elim term
    | var index p => var index p
    | metavar m arguments => metavar m (\lam i => inject-term-right envL envR (arguments i))
    | func f arguments => func (inr f) (\lam i => inject-term-right envL envR (arguments i))

  \func promote-rewrite-rule-left {Sort : \Set}
                                  (envL envR : FSignature Sort)
                                  (rule : RewriteRule envL)
    : RewriteRule (JointFSignature envL envR) \cowith
    | s => rule.s
    | meta-context => rule.meta-context
    | l => inject-term-left envL envR rule.l
    | r => inject-term-left envL envR rule.r
    | l-is-func => promote-injection-left {_} {envL} {envR} rule.l rule.l-is-func
    \where {
      \lemma promote-injection-left {Sort : \Set}
                                    {envL envR : FSignature Sort}
                                    {context : List Sort}
                                    {s : Sort}
                                    {mc : MetaContext Sort}
                                    (t : Term envL context s mc)
                                    (t-is-func : FunctionalRoot {envL} t) : FunctionalRoot {JointFSignature envL envR} (inject-term-left envL envR t) \elim t, t-is-func
        | func f arguments, T-has-functional-root => T-has-functional-root {JointFSignature envL envR}
    }

  \func promote-rewrite-rule-right {Sort : \Set}
                                   (envL envR : FSignature Sort)
                                   (rule : RewriteRule envR)
    : RewriteRule (JointFSignature envL envR) \cowith
    | s => rule.s
    | meta-context => rule.meta-context
    | l => inject-term-right envL envR rule.l
    | r => inject-term-right envL envR rule.r
    | l-is-func => promote-injection-right {_} {envL} {envR} rule.l rule.l-is-func
    \where {
      \lemma promote-injection-right {Sort : \Set}
                                     {envL envR : FSignature Sort}
                                     {context : List Sort}
                                     {s : Sort}
                                     {mc : MetaContext Sort}
                                     (t : Term envR context s mc)
                                     (t-is-func : FunctionalRoot {envR} t) : FunctionalRoot {JointFSignature envL envR} (inject-term-right envL envR t) \elim t, t-is-func
        | func f arguments, T-has-functional-root => T-has-functional-root {JointFSignature envL envR}
    }

  \func promote-indexed-set-left {Sort : \Set} {envL envR : FSignature Sort} (rules : IndexedSet (RewriteRule envL)) : IndexedSet (RewriteRule (JointFSignature envL envR)) \cowith
    | J => rules.J
    | get j => Injections.promote-rewrite-rule-left envL envR (rules.get j)

  \func promote-indexed-set-right {Sort : \Set} {envL envR : FSignature Sort} (rules : IndexedSet (RewriteRule envR)) : IndexedSet (RewriteRule (JointFSignature envL envR)) \cowith
    | J => rules.J
    | get j => Injections.promote-rewrite-rule-right envL envR (rules.get j)
}

\func JointRules {Sort : \Set} {envL envR : FSignature Sort}
                 (L-rules : IndexedSet (RewriteRule envL))
                 (R-rules : IndexedSet (RewriteRule envR))
  : IndexedSet (RewriteRule (JointFSignature envL envR)) =>
  \let
    | injected-left-set : IndexedSet (RewriteRule (JointFSignature envL envR)) => Injections.promote-indexed-set-left {_} {envL} {envR} L-rules
    | injected-right-set : IndexedSet (RewriteRule (JointFSignature envL envR)) => Injections.promote-indexed-set-right {_} {envL} {envR} R-rules
  \in JointIndexedSet injected-left-set injected-right-set


\instance JointHRS {Sort : \Set} {envL envR : FSignature Sort} {mc : MetaContext Sort}
                   (L : SimpleHigherOrderTermRewritingSystem envL mc)
                   (R : SimpleHigherOrderTermRewritingSystem envR mc)
: SimpleHigherOrderTermRewritingSystem (JointFSignature L.env R.env)
  | set-of-rules => JointRules {_} {envL} {envR} L.set-of-rules R.set-of-rules
  | meta-context => mc

