\import ARS
\import Data.List (!!, ++, ++-assoc, ++_nil, ::, List, length, map, nil)
\import Data.Or
\import Equiv
\import Equiv.Univalence
\import Function
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set
\import TRS.Data.Fin
\import TRS.HRS
\import TRS.List
\import TRS.Substitutions
\import TRS.Utils


-- | Family of functional term symbols
\class FSignature {
  | Sort : \Set
  | symbol : Sort -> \Set
  | domain : \Pi {s : Sort} (symbol s) -> List (\Sigma (List Sort) Sort)
    \func \infix 7 !!param {s : Sort} (m : symbol s) (index : Index (domain m)) : List Sort =>
      (domain m !! index).1

    \func \infix 7 !!sort {s : Sort} (m : symbol s) (index : Index (domain m)) : Sort =>
      (domain m !! index).2
  }

\open FSignature

\record MetaContext (Sort : \Set)
  | metaname : Sort -> \Set
  | m-domain : \Pi {s : Sort} (metaname s) -> List Sort

-- | Term of higher-order TRS
\data Term (env : FSignature)
           (context : List Sort)
           (termSort : Sort)
           (mc : MetaContext Sort): \Set
  | var (index : Index context) (termSort = context !! index)
  | metavar
    (m : mc.metaname termSort)
    (arguments : \Pi (index : Index (mc.m-domain m)) -> Term env context (mc.m-domain m !! index) mc)
  | func
    (f : symbol termSort)
    (arguments : \Pi (index : Index (domain f)) -> Term env (context ++ f !!param index) (f !!sort index) mc)

-- | Substitution of regular variables
\func Substitution {env : FSignature} (c c' : List Sort) (mc : MetaContext Sort) : \Set =>
  \Pi (index : Index c) -> Term env c' (c !! index) mc
  \where {
    \func apply {env : FSignature} {s : Sort} {c : List Sort} {mc : MetaContext Sort}
                (t : Term env c s mc)
                {c' : List Sort}
                (map : Substitution c c' mc)
      : Term env c' s mc \elim t
      | var index idp => map index
      | metavar m arguments => metavar m (\lam i => Substitution.apply (arguments i) map)
      | func f arguments => func f (\lam i => Substitution.apply (arguments i) (append-context-right map))
  }

\record RewriteRule (env : FSignature) {s : Sort} {meta-context : MetaContext Sort}
                    (l : Term env nil s meta-context)
                    (r : Term env nil s meta-context)
                    (l-is-func : FunctionalRoot l)

\data FunctionalRoot {env : FSignature} {s : Sort} {context : List Sort} {mc : MetaContext Sort}
                     (T : Term env context s mc) \elim T
  | func _ _ => T-has-functional-root

-- | Substitution of metavariables
\func MetaSubstitution (env : FSignature) (new-context : List Sort) (mc mc' : MetaContext Sort): \Set =>
  \Pi {s : Sort} (mvar : mc.metaname s) -> Term env (new-context ++ (mc.m-domain mvar)) s mc'
  \where {
    \func apply {env : FSignature} {context core-context : List Sort} {s : Sort} {mc mc' : MetaContext Sort}
                (t : Term env context s mc)
                (sublist : SubList core-context context)
                (subst : MetaSubstitution env core-context mc mc') : Term env context s mc' \elim t
      | var index p => var index p
      | metavar m arguments => Substitution.apply (subst m) (extend-substitution-left sublist (\lam i => apply (arguments i) sublist subst))
      | func f arguments => func f (\lam i => apply (arguments i) (SubList.extend-right-single sublist) subst)
  }

\record IndexedSet (A : \Type)
  | J : \Set
  | get : J -> A
  \where {
    \func \infix 4 in {A : \Type} (a : A) (set : IndexedSet A) : \Type => \Sigma (point : set.J) (set.get point = a)
  }

\func transport-chooser-f {env : FSignature} {s : Sort} {context : List Sort} {mc : MetaContext Sort} {f-A f-B : symbol s} (p : f-A = f-B)
                          (choosing-B : \Pi (index : F-param-index f-B) -> Term env (context ++ (f-B !!param index)) (f-B !!sort index) mc)
  :  \Pi (index : Index (domain f-A)) -> Term env (context ++ (f-A !!param index)) (f-A !!sort index) mc =>
  transport (\lam f => \Pi (index : Index (domain f)) -> Term env (context ++ f !!param index) (f !!sort index) mc) (inv p) choosing-B

\func transport-chooser-m {env : FSignature} {s : Sort} {context : List Sort} {mc : MetaContext Sort} {m-A m-B : mc.metaname s} (p : m-A = m-B)
                          (choosing-B : \Pi (index : Index (mc.m-domain m-B)) -> Term env context ((mc.m-domain m-B) !! index) mc)
  : \Pi (index : Index (mc.m-domain m-A)) -> Term env context ((mc.m-domain m-A) !! index) mc =>
  transport (\lam (m : mc.metaname s) => \Pi (index : Index (mc.m-domain m)) -> Term env context ((mc.m-domain m) !! index) mc) (inv p) choosing-B

\data RewriteRelation
  {env : FSignature}
  {mc : MetaContext Sort}
  (set-of-rules : IndexedSet (RewriteRule env))
  {context : List Sort} {s : Sort}
  (A B : Term env context s mc) \elim A, B
  | A, B =>
  rewrite-with-rule
    (idx : set-of-rules.J)
    (sort-eq : s = RewriteRule.s {set-of-rules.get idx})
    (substitution : MetaSubstitution env context (RewriteRule.meta-context {set-of-rules.get idx}) mc)
    (left-coherence :
    MetaSubstitution.apply (weakening (RewriteRule.l {set-of-rules.get idx}) SubList.sublist-trivial-skip) SubList.identity substitution =
    transport (Term env context __ mc) sort-eq A)
    (right-coherence :
    MetaSubstitution.apply (weakening (RewriteRule.r {set-of-rules.get idx}) SubList.sublist-trivial-skip) SubList.identity substitution =
    transport (Term env context __ mc) sort-eq B)

  | func f-A choosing-A, func f-B choosing-B =>
  rewrite-with-parameter-f
    (p : f-A = f-B)
    (i : Index (domain f-A))
    (reduction : RewriteRelation set-of-rules (choosing-A i) (transport-chooser-f p choosing-B i))
    (other-unchanged : \Pi (j : Index (domain f-A)) (j = i -> Empty) -> (choosing-A j) = (transport-chooser-f p choosing-B j))

  | metavar (m-A : mc.metaname s) choosing-A, metavar (m-B : mc.metaname s) choosing-B =>
  rewrite-with-parameter-m
    (p : m-A = m-B)
    (i : Index (m-domain m-A))
    (reduction : RewriteRelation set-of-rules (choosing-A i) (transport-chooser-m p choosing-B i))
    (other-unchanged : \Pi (j : Index (m-domain m-A)) (j = i -> Empty) -> (choosing-A j) = (transport-chooser-m p choosing-B j))

\class HigherOrderTermRewritingSystem \noclassifying (env : FSignature) (meta-context : MetaContext Sort) (set-of-rules : IndexedSet (RewriteRule env))  \extends AbstractReductionSystem
  | A => \Sigma (context : List Sort) (sort : Sort) (Term env context sort meta-context)
  | ~> a b => \case \elim a, b \with {
    | (context, sort, A), (context', sort', B) => âˆƒ (p : context' = context) (q : sort' = sort) (RewriteRelation set-of-rules A (transport2 (\lam a b => Term env a b meta-context) p q B))
  }

\class SimpleHigherOrderTermRewritingSystem \extends HigherOrderTermRewritingSystem, SimpleARS
