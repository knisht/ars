\import Data.List (!!, ++, ::, List, length, nil)
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import TRS.HRS
\import TRS.List
\import TRS.Substitutions

\func ModularMetaSignature {env : Environment} {n : Nat} (producer : \Pi (Fin n) -> MetaSignature Sort) : MetaSignature Sort \cowith
  | metaname s => \Sigma (i : Fin n) (metaname {producer i} s)
  | m-domain m => m-domain {(producer (m.1))} m.2

\func PointedModularMetaSignature {env : Environment} (point : Sort) (pointed-list : List Sort)
                                  (producer : \Pi (Fin (length pointed-list)) -> MetaSignature Sort) : MetaSignature Sort \cowith
  | metaname s => (s = point) `Or` (\Sigma (i : Fin (length pointed-list)) (metaname {producer i} s))
  | m-domain m => \case \elim m \with {
    | inl eq => pointed-list
    | inr m => m-domain {(producer (m.1))} m.2
  }

\func SingularMetaSignature {env : Environment} (point : Sort) (context : List Sort)
  : MetaSignature Sort \cowith
  | metaname s => s = point
  | m-domain eq => context

\func EmptyMetasignature {env : Environment} : MetaSignature Sort \cowith
  | metaname m => Empty
  | m-domain e => contradiction

\func PureTerm (env : Environment) (context : List Sort) (s : Sort) : \Type => Term env context s EmptyMetasignature

-- | Linear term, designed specifically for decomposition
\data LinearTerm (env : Environment)
                 (context : List Sort)
                 (termSort : Sort)
  | lt-func (f : FunctionalSymbol.symbol termSort)
            (choosing : \Pi (index : Fin (length (domain f))) -> LinearTerm env (context ++ (f FunctionalSignature.!!param index)) (f FunctionalSignature.!!sort index))
  | lt-metavar (params : List Sort) (choosing : \Pi (index : Fin (length params)) -> LinearTerm env context (params !! index))
  | lt-full-metavar
  | lt-var (index : Fin (length context)) (termSort = context !! index)
  \where {
    \func upgrade-metavariables-t {env : Environment} {context : List Sort} {s : Sort} {n : Nat} {index : Fin n}
                                  (metas : \Pi (Fin n) -> MetaSignature Sort)
                                  (A : Term env context s (metas index))
      : Term env context s (ModularMetaSignature metas) \elim A
      | var index p => var index p
      | metavar m choosing => metavar (index, m) (\lam i => upgrade-metavariables-t metas (choosing i))
      | func f choosing => func f (\lam i => upgrade-metavariables-t metas (choosing i))

    \func upgrade-metavariables-mt {env : Environment} {context : List Sort} {s : Sort}
                                   (point : Sort)
                                   (pointed-context : List Sort)
                                   {index : Fin (length pointed-context)}
                                   (metas : \Pi (Fin (length pointed-context)) -> MetaSignature Sort)
                                   (A : Term env context s (metas index))
      : Term env context s (PointedModularMetaSignature point pointed-context metas) \elim A
      | var index p => var index p
      | metavar m choosing => metavar (inr (index, m)) (\lam i => upgrade-metavariables-mt point pointed-context metas (choosing i))
      | func f choosing => func f (\lam i => upgrade-metavariables-mt point pointed-context metas (choosing i))

    \func convert-to-term {env : Environment} {context : List Sort} {s : Sort} (term : LinearTerm env context s) : Term env context s (LinearMetasignatureT term) \elim term
      | lt-func f choosing => func f (\lam i => upgrade-metavariables-t (\lam i => LinearMetasignatureT (choosing i)) (convert-to-term (choosing i)))
      | lt-metavar params choosing => metavar (inl idp) (\lam i => upgrade-metavariables-mt s params (\lam i => LinearMetasignatureT (choosing i)) (convert-to-term (choosing i)))
      | lt-var index p => var index p
      | lt-full-metavar => metavar idp (\lam i => var i idp)
  }

\func LinearMetasignatureT {env : Environment} {context : List Sort} {s : Sort} (term : LinearTerm env context s) : MetaSignature Sort \elim term
  | lt-func f choosing => ModularMetaSignature (\lam i => LinearMetasignatureT (choosing i))
  | lt-metavar params choosing => PointedModularMetaSignature s params (\lam i => LinearMetasignatureT (choosing i))
  | lt-var index p => EmptyMetasignature
  | lt-full-metavar => SingularMetaSignature s context

\data LinearPattern (env : Environment)
                    (context : List Sort)
                    (termSort : Sort)
  | lp-func (f : FunctionalSymbol.symbol termSort)
            (choosing : \Pi (index : Fin (length (domain f))) -> LinearPattern env (context ++ (f FunctionalSignature.!!param index)) (f FunctionalSignature.!!sort index))
  | lp-metavar
  \where {
    \func upgrade-metavariables-p {env : Environment} {context : List Sort} {s : Sort} {n : Nat} {index : Fin n}
                                  (producer : \Pi (Fin n) -> MetaSignature Sort)
                                  (A : Term env context s (producer index))
      : Term env context s (ModularMetaSignature producer) \elim A
      | var index p => var index p
      | metavar m choosing => metavar (index, m) (\lam i => upgrade-metavariables-p producer (choosing i))
      | func f choosing => func f (\lam i => upgrade-metavariables-p producer (choosing i))

    \func convert-to-term {env : Environment} {context : List Sort} {s : Sort} (pattern : LinearPattern env context s) : Term env context s (LinearMetasignature pattern) \elim pattern
      | lp-func f choosing => func f (\lam i => upgrade-metavariables-p (\lam i => LinearMetasignature (choosing i)) (convert-to-term (choosing i)))
      | lp-metavar => metavar idp (\lam index => var index idp)
  }

\record LinearRewriteRule \extends RewriteRule {
  | linear-pattern : LinearPattern env nil s
  | meta-signature => LinearMetasignature linear-pattern
  | l => LinearPattern.convert-to-term linear-pattern
}

\record LinearRewriteStep \extends RewriteStep {
  \override  rule : LinearRewriteRule env {s}
}

\func LinearMetasignature {env : Environment} {context : List Sort} {s : Sort} (pattern : LinearPattern env context s) : MetaSignature Sort \elim pattern
  | lp-func f choosing => \new MetaSignature {
    | metaname s => \Sigma (i : Fin (length (domain f))) (metaname {LinearMetasignature (choosing i)} s)
    | m-domain m => m-domain {LinearMetasignature (choosing m.1)} m.2
  }
  | lp-metavar => \new MetaSignature {
    | metaname s' => s = s'
    | m-domain m => context
  }

\func modular-commutation {env : Environment} {subcontext context : List Sort} {s : Sort} {msig : MetaSignature Sort}
                          {n : Nat}
                          (sigs : \Pi (i : Fin n) -> MetaSignature Sort)
                          (i : Fin n)
                          (sublist : SubList subcontext context)
                          (term : Term env context s (sigs i))
                          (rho : MetaSubstitution env subcontext (ModularMetaSignature sigs) msig)
  : MetaSubstitution.apply term sublist (\lam m => rho (i, m)) = MetaSubstitution.apply (LinearTerm.upgrade-metavariables-t sigs term) sublist rho
\elim term
  | var index p => idp
  | metavar m choosing => pmap (\lam f => Substitution.apply (rho (i, m)) (extend-substitution-left sublist f)) (ext (\lam index => modular-commutation sigs i sublist (choosing index) rho))
  | func f choosing => pmap (func f) (ext (\lam index => modular-commutation sigs i (SubList.extend-right-single sublist) (choosing index) rho))

\func invariant-through-empty-subst
  {env : Environment} {context context' : List Sort} {s : Sort} {old-msig new-msig : MetaSignature Sort}
  (rho : MetaSubstitution env nil old-msig new-msig)
  (sublist sublist' : SubList nil (context ++ context'))
  (term : Term env (context ++ context') s old-msig)
  : MetaSubstitution.apply term sublist rho = MetaSubstitution.apply term sublist' rho => {?}
--\elim term
--  | var index p => idp
--  | metavar m choosing => \let | inner-applications i => invariant-through-empty-subst rho sublist sublist' (choosing i)
--                               | inner-applications-ext : (\lam i => MetaSubstitution.apply (choosing i) sublist rho) = (\lam i => MetaSubstitution.apply (choosing i) sublist' rho) => ext inner-applications
--                          \in pmap (Substitution.apply (rho m)) (transport (\lam f => extend-substitution-right' sublist (\lam i => MetaSubstitution.apply (choosing i) sublist rho) = extend-substitution-right' sublist' f) inner-applications-ext (ext (extension-over-nil-sublist (\lam i => MetaSubstitution.apply (choosing i) sublist rho) sublist sublist')))
--  | func f choosing => pmap (func f) (ext (\lam index => invariant-through-empty-subst rho (SubList.extend-right-single sublist) (SubList.extend-right-single sublist') (choosing index)))

--\func extension-over-nil-sublist {env : Environment} {context context' : List Sort} {msig : MetaSignature Sort}
--                                 (subst : Substitution context context' msig)
--                                 (sublist sublist' : SubList nil context')
--                                 (i : Fin (length (context ++ nil)))
--                                 : extend-substitution-right' sublist subst i = extend-substitution-right' sublist' subst i \elim context, i
--  | :: a context, 0 => idp
--  | :: a context, suc i => extension-over-nil-sublist (\lam i => subst (suc i)) sublist sublist' i