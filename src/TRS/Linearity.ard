\import Data.List (!!, ++, ::, List, length, nil)
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import TRS.Data.Fin
\import TRS.Data.SubList
\import TRS.HRS
\import TRS.MetaContexts
\import TRS.Substitutions
\import TRS.Union
\import TRS.Union.TopLevel
\open FSignature

\data GenericLinearTerm
  (env : FSignature)
  (context : List Sort)
  (termSort : Sort)
  (allowVariables : \Prop)
  | l-func
    (f : symbol termSort)
    (arguments : \Pi (index : Index (domain f)) -> GenericLinearTerm env (context ++ (f !!param index)) (f !!sort index) allowVariables)
  | l-full-metavar
  | l-var (index : Index context) (termSort = context !! index) allowVariables

\module Linear \where {
  \func convert-to-term
    {env : FSignature} {context : List Sort} {s : Sort} {allowVariables : \Prop}
    (term : GenericLinearTerm env context s allowVariables)
    : Term env context s (LinearMetaContext term)
  \elim term
    | l-func f choosing => func f (\lam i => ModularMetaContext.upgrade-metavariables (\lam i => LinearMetaContext (choosing i)) (convert-to-term (choosing i)))
    | l-var index p _ => var index p
    | l-full-metavar => metavar idp (\lam i => var i idp)

  \open Confluence

  \func convert-to-injected-term
    {tc : Confluence.TheoremContext} {allow-variables : \Prop}
    (color : Color) {context : List tc.Sort'} {s : tc.Sort'}
    (term : GenericLinearTerm (TheoremContext.colored-env {tc} color) context s allow-variables)
    : Term (TheoremContext.env {tc}) context s (LinearMetaContext {TheoremContext.colored-env {tc} color} term)
  \elim color, term
    | red, l-func f choosing => func (inl f) (\lam i => ModularMetaContext.upgrade-metavariables {TheoremContext.env} (\lam i => LinearMetaContext {envL} (choosing i)) (convert-to-injected-term red (choosing i)))
    | red, l-full-metavar => metavar idp (\lam i => var i idp)
    | red, l-var index p _ => var index p
    | blue, l-func f choosing => func (inr f) (\lam i => ModularMetaContext.upgrade-metavariables {TheoremContext.env} (\lam i => LinearMetaContext {envR} (choosing i)) (convert-to-injected-term blue (choosing i)))
    | blue, l-full-metavar => metavar idp (\lam i => var i idp)
    | blue, l-var index p _ => var index p
}

\func LinearMetaContext {env : FSignature} {context : List Sort} {s : Sort} {allowVariables : \Prop}
                        (term : GenericLinearTerm env context s allowVariables) : MetaContext Sort \elim term
  | l-func f choosing => ModularMetaContext (\lam i => LinearMetaContext (choosing i))
  | l-var index p _ => EmptyMetaContext
  | l-full-metavar => SingularMetaContext s context

\func LinearTerm (env : FSignature)
                 (context : List Sort)
                 (termSort : Sort) : \Type => GenericLinearTerm env context termSort (\Sigma)


\cons lt-var {env : FSignature} {context : List Sort} {termSort : Sort} (index : Index context) (p : termSort = context !! index)
: LinearTerm env context termSort
=> l-var index p ()

\func LinearPattern
  (env : FSignature)
  (context : List Sort)
  (termSort : Sort)
  : \Type =>
  GenericLinearTerm env context termSort Empty

\lemma modular-commutation {env : FSignature} {subcontext context : List Sort} {s : Sort} {msig : MetaContext Sort}
                           {n : Nat}
                           (sigs : \Pi (i : Fin n) -> MetaContext Sort)
                           (i : Fin n)
                           (sublist : SubList subcontext context)
                           (term : Term env context s (sigs i))
                           (rho : MetaSubstitution env subcontext (ModularMetaContext sigs) msig)
  :
  MetaSubstitution.apply term sublist (\lam m => rho (i, m))
    =
  MetaSubstitution.apply (ModularMetaContext.upgrade-metavariables sigs term) sublist rho
\elim term
  | var index p => idp
  | metavar m choosing => pmap
      (\lam f => Substitution.apply (rho (i, m)) (extend-substitution-left sublist f))
      (ext (\lam index => modular-commutation sigs i sublist (choosing index) rho))
  | func f choosing => pmap
      (func f)
      (ext (\lam index => modular-commutation sigs i (SubList.extend-right-single sublist) (choosing index) rho))

\lemma invariant-through-empty-subst
  {env : FSignature} {context context' : List Sort} {s : Sort} {old-msig new-msig : MetaContext Sort}
  (rho : MetaSubstitution env nil old-msig new-msig)
  (sublist sublist' : SubList nil (context ++ context'))
  (term : Term env (context ++ context') s old-msig)
  :
  MetaSubstitution.apply term sublist rho
    =
  MetaSubstitution.apply term sublist' rho => lemma rho sublist sublist' term (trivial-sublist-contractible _ _)
  \where {
    \lemma lemma
      {env : FSignature} {context context' : List Sort} {s : Sort} {old-msig new-msig : MetaContext Sort}
      (rho : MetaSubstitution env nil old-msig new-msig)
      (sublist sublist' : SubList nil (context ++ context'))
      (term : Term env (context ++ context') s old-msig)
      (eq : sublist = sublist')
      : MetaSubstitution.apply term sublist rho = MetaSubstitution.apply term sublist' rho \elim eq
      | idp => idp
  }
