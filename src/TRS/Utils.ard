\import Data.List (!!, ++, List, length, ::, nil)
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Set
\import Set.Fin
\import TRS.Data.Fin
\import TRS.HRS
\import TRS.List

\func F-param-index {fs : FSignature} {s : Sort} (f : fs.symbol s) : \Set => Index (fs.domain f)

\func transport2-to-transport {A B : \Type} {C : A -> B -> \Type} (a a' : A) (eq : a = a') (b : B) (c : C a b) : transport2 C eq idp c = transport (C __ b) eq c \elim eq
  | idp => idp

\func flip-or {A B : \Type} (x : Or A B) : Or B A \elim x
  | inl a => inr a
  | inr b => inl b

\data TripleOr (A B C : \Type)
  | in1 A
  | in2 B
  | in3 C

\func unor {A B : \Type} (default : A) (or : A `Or` B) : A \elim or
  | inl a => a
  | inr b => default

\func unor-r {A B : \Type} (default : B) (or : A `Or` B) : B \elim or
  | inl a => default
  | inr b => b

\func or-contradiction {A B : \Type} {a : A} {b : B} (eq : inl a = inr b) : Empty => contradiction
