\import Data.List (!!, ++, List, length, nil)
\import Data.Maybe
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Set
\import TRS.Data.Fin
\import TRS.Data.SubList
\import TRS.HRS
\import TRS.Linearity
\import TRS.Maybe
\import TRS.MetaContexts
\import TRS.Substitutions
\import TRS.Union
\import TRS.Utils


\open Confluence
\open TheoremContext

\func LinearDump {tc : TheoremContext} =>
  \Pi (point : L-rules.J `Or` R-rules.J) ->
      \Sigma (linear-pattern : LinearPattern (colored-env (color-of-idx point)) nil (RewriteRule.s {(get {(JointRules {Sort'} {envL} {envR} L-rules R-rules)} point)}))
             (meta-eq : RewriteRule.meta-context {(get {(JointRules {_} {envL} {envR} L-rules R-rules)} point)} = LinearMetaContext {colored-env (color-of-idx point)} linear-pattern)
             (Linear.convert-to-injected-term (color-of-idx point) linear-pattern = transport (Term env nil (RewriteRule.s {(get {(JointRules {_} {envL} {envR} L-rules R-rules)} point)})) meta-eq (RewriteRule.l {(get {(JointRules {_} {envL} {envR} L-rules R-rules)} point)}))

\func fill-confluence
  {tc : TheoremContext} {context : List Sort'} {s : Sort'}
  (A B C : Term env context s (EmptyMetaContext {env}))
  (A~>B : Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)) A B)
  (A~>C : Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)) A C)
  (l-confluential : ConfluentialSystem envL L-rules)
  (r-confluential : ConfluentialSystem envR R-rules)
  (all-rules-are-linear : LinearDump)
  : StraightJoin B C (Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules))) =>
  \let | lifted-a => Closure.lift
      {Term env context s (EmptyMetaContext {env})}
      {Term env context s (EmptyMetaContext {env})}
      {RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)}
      {TrichromaticParallelReduction}
      (\lam t => t)
      (\lam {x} {y} rel => embed-rewrite-relation x y rel all-rules-are-linear) A B A~>B
       | lifted-b => Closure.lift
           {Term env context s (EmptyMetaContext {env})}
           {Term env context s (EmptyMetaContext {env})}
           {RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)}
           {TrichromaticParallelReduction}
           (\lam t => t)
           (\lam {x} {y} rel => embed-rewrite-relation x y rel all-rules-are-linear) A C A~>C
       | joins => unify-reduction A B C lifted-a lifted-b (\lam a b c a->b a->c => \let (D, m1, m2, b->D, c->D) => bpr-confluence a->b.2 a->c.2 a->b.3 a->c.3 l-confluential r-confluential all-rules-are-linear \in (D, (a->c.1, m1, b->D), (a->b.1, m2, c->D)))
       | long-closure-b-w => Closure.lift {_} {_}
           {TrichromaticParallelReduction}
           {Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules))}
           (\lam x => x)
           (\lam {a} {b} bpr => unembed-rewrite-relation bpr.2 bpr.3)
           B joins.1 joins.2
       | long-closure-c-w => Closure.lift {_} {_}
           {TrichromaticParallelReduction}
           {Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules))}
           (\lam x => x)
           (\lam {a} {b} bpr => unembed-rewrite-relation bpr.2 bpr.3)
           C joins.1 joins.3
  \in \new StraightJoin {
    | common-reduct => joins.1
    | a~>cr => Closure.flatten long-closure-b-w
    | b~>cr => Closure.flatten long-closure-c-w
  }

\func unify-reduction
  {A : \Type} {Rel : A -> A -> \Type} (x y z : A)
  (x->y : Closure Rel x y) (x->z : Closure Rel x z)
  (unifier : \Pi (a b c : A) (a->b : Rel a b) (a->c : Rel a c) -> \Sigma (d : A) (b->d : Rel b d) (c->d : Rel c d))
  : \Sigma (w : A) (y->w : Closure Rel y w) (z->w : Closure Rel z w) \elim x->y
  | c-trivial idp => (z, x->z, c-trivial idp)
  | c-basic x->y => unify-line x y z x->y x->z unifier
  | c-connect c x->c c->y => \let | (w, c->w, z->w) => unify-line x c z x->c x->z unifier
                                  | (w', y->w', w->w') => unify-reduction c y w c->y c->w unifier
                             \in (w', y->w', Closure.concat z->w w->w')
  \where {
    \func unify-line
      {A : \Type} {Rel : A -> A -> \Type} (x y z : A)
      (x->y : Rel x y) (x->z : Closure Rel x z)
      (unifier : \Pi (a b c : A) (a->b : Rel a b) (a->c : Rel a c) -> \Sigma (d : A) (b->d : Rel b d) (c->d : Rel c d))
      : \Sigma (w : A) (y->w : Closure Rel y w) (z->w : Closure Rel z w) \elim x->z
      | c-trivial idp => (y, c-trivial idp, c-basic x->y)
      | c-basic x->z => \let (w, y->w, z->w) => unifier x y z x->y x->z \in (w, c-basic y->w, c-basic z->w)
      | c-connect c x->c c->z =>
        \let | (w, y->w, c->w) => unifier x y c x->y x->c
             | (w', w->w', z->w') => unify-line c w z c->w c->z unifier
        \in (w', c-connect w y->w w->w', z->w')
  }

\func embed-rewrite-relation {tc : TheoremContext} {context : List Sort'} {s : Sort'}
                             (A B : Term env context s (EmptyMetaContext {env}))
                             (A~>B : RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules) A B)
                             (all-rules-are-linear : LinearDump)
  : TrichromaticParallelReduction A B \elim A, B, A~>B
  | var index p, B, rewrite-with-rule idx sort-eqs msubst l-coherence r-coherence => \let q => contradicting {env} index p msubst sort-eqs (RewriteRule.l {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx}) l-coherence (RewriteRule.l-is-func {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx}) \in contradiction
  | func f choosing1, B, rewrite-with-rule idx sort-eq msubst l-coherence r-coherence
  =>
    \let | (lp, meta-eq, lp=l) => all-rules-are-linear idx
         | lp-is-func : FunctionalRoot {colored-env (color-of-idx idx)} (Linear.convert-to-term {colored-env (color-of-idx idx)} lp) => extract-functional-root (color-of-idx idx) lp meta-eq _ lp=l (RewriteRule.l-is-func {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx})
         | (color-eq, hcr-l')  => coloring-lemma sort-eq (color-of-idx idx) lp (RewriteRule.l {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx}) (RewriteRule.l-is-func {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx}) meta-eq lp=l msubst f choosing1 l-coherence
         | (uninjected-r, inject-uninj) => break-down-rule idx
         | hcr-l => get-colored-root-for-l idx
         | unified => unify-tlcr (color-of-idx idx) (RewriteRule.l {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx}) (RewriteRule.r {get {JointRules {_} {envL} {envR} tc.L-rules tc.R-rules} idx}) (sort-eq) lp lp-is-func (meta-eq) lp=l msubst (func f choosing1) B l-coherence r-coherence uninjected-r inject-uninj
    \in
      (color-of-root f,
       just (color-of-idx idx),
       parallelization-f
           choosing1
           (\lam i1 => (nothing, inl idp, equal-trees idp))
           (cr-rewrite (tc-basic (rewrite-with-rule-colored (infer-color-from-hcr (color-of-idx idx) f choosing1 color-eq) unified.1 unified.2 unified.6 unified.3 unified.4 unified.5 idx unified.8 unified.7 unified.9 unified.10)) color-eq))
  | func f-A choosing-A, func f-B choosing-B, rewrite-with-parameter-f idp index rd eq =>
    \let | (global-color, color, bpr) => embed-rewrite-relation (choosing-A index) (choosing-B index) rd all-rules-are-linear
         | (someColor, mediator, inrd, cwr) => collect-reductions-together-raw {_} {_} {_} {_} {global-color} f-A choosing-A choosing-B (\lam i => \case (fin-dec i index) \with {
           | yes e => rewrite e (color, bpr)
           | no n => (nothing, equal-trees (eq i n))
         })
    \in (global-color, someColor, parallelization-f mediator inrd cwr)
  | metavar () choosing-A, _, _
  \where {
    \func equate-colors {tc : TheoremContext} {s : Sort'} (color color' : Color) {mc : MetaContext Sort'} (t : Term env nil s mc) (hcr-a : TheoremContext.HasColoredRoot color t) (hcr-b : TheoremContext.HasColoredRoot color' t) : color = color' \elim color, color', t, hcr-a, hcr-b
      | red, red, func (inl s1) choosing, TheoremContext.red-func-root, TheoremContext.red-func-root => idp
      | blue, blue, func (inr s1) choosing, TheoremContext.blue-func-root, TheoremContext.blue-func-root => idp
      | red, blue, func (inr b) choosing1, (), hcr-b
      | blue, red, func (inl a) choosing, (), hcr-b

    \func extract-functional-root
      {tc : TheoremContext} {s : Sort'} (color : Color) {mc : MetaContext Sort'}
      (lp : LinearPattern (TheoremContext.colored-env color) nil (s))
      (meta-eq : mc = LinearMetaContext {TheoremContext.colored-env color} lp)
      (t : Term env nil s mc)
      (coh : Linear.convert-to-injected-term color lp =
      transport (Term TheoremContext.env nil (s)) meta-eq t)
      (t-is-func : FunctionalRoot {env} t)
      : FunctionalRoot {colored-env color} (Linear.convert-to-term {colored-env color} lp) \elim color, lp, meta-eq, t, t-is-func
      | red, l-func f choosing, idp, func f1 choosing1, T-has-functional-root => T-has-functional-root {colored-env red}
      | blue, l-func f choosing, idp, func f1 choosing1, T-has-functional-root => T-has-functional-root {colored-env blue}
      | red, l-full-metavar, idp, func f choosing1, T-has-functional-root => contradiction
      | blue, l-full-metavar, idp, func f choosing1, T-has-functional-root => contradiction
      | _, l-var index p (), meta-eq, t, t-is-func

    \func infer-color-from-hcr {tc : TheoremContext} {s : Sort'} {context : List Sort'} (color : Color) (f : env.symbol s) (choosing : \Pi (index : Index (env.domain f)) ->
        Term TheoremContext.env (context ++ f FSignature.!!param {env} index) (f FSignature.!!sort {env} index) (EmptyMetaContext {env})) (eq-color : color-of-root f = color) : TheoremContext.HasColoredRoot color (func {env} f choosing) \elim color, f, eq-color
      | red, inl a, eq-color => TheoremContext.red-func-root
      | blue, inr b, eq-color => TheoremContext.blue-func-root

    \func contradicting {env : FSignature} {context : List Sort} {s s' : Sort} {mc mc' : MetaContext Sort} (index : Index context) (p : s = context !! index) (msubst : MetaSubstitution env context mc mc')
                        (eq' : s = s')
                        (t : Term env nil s' mc) (eq : MetaSubstitution.apply (weakening t SubList.sublist-trivial-free) (SubList.identity) msubst = transport (Term env context __ mc') eq' (var index p)) (rt : FunctionalRoot t) : Empty \elim eq', t, rt
      | idp, func f choosing, T-has-functional-root => contradiction

    \func unify-tlcr
      {tc : TheoremContext} {context : List Sort'} {rule-s s' : Sort'} {inner-mc mc : MetaContext Sort'}
      (color : Color)
      (old-l old-r : Term env nil rule-s inner-mc)
      (eq : s' = rule-s)
      (new-l : LinearPattern (colored-env color) nil rule-s)
      (new-l-is-func : FunctionalRoot {colored-env color} (Linear.convert-to-term {colored-env color} new-l))
      (ms-eq : inner-mc = LinearMetaContext {colored-env color} new-l)
      (lp=l : Linear.convert-to-injected-term color new-l = transport (Term env nil rule-s) ms-eq (old-l))
      (subst : MetaSubstitution env context inner-mc mc)
      (A B : Term env context s' mc)
      (l-coherence : MetaSubstitution.apply {env} (weakening {env} (old-l) SubList.sublist-trivial-free) SubList.identity subst = transport (Term env context __ mc) eq A)
      (r-coherence : MetaSubstitution.apply {env} (weakening {env} (old-r) SubList.sublist-trivial-free) SubList.identity subst = transport (Term env context __ mc) eq B)
      (decomposed-r : Term (TheoremContext.colored-env color) nil rule-s inner-mc)
      (inject-r : TheoremContext.inject-monochrome-term color decomposed-r = old-r)
      : \Sigma (new-lp : LinearPattern (colored-env color) nil s')
               (new-r : Term (colored-env color) nil s' (LinearMetaContext {colored-env color} new-lp))
               (new-subst : MetaSubstitution env context (LinearMetaContext {colored-env color} new-lp) mc)
               (new-l-coherence : MetaSubstitution.apply {env} (weakening {env} (Linear.convert-to-injected-term color new-lp) SubList.sublist-trivial-free) SubList.identity new-subst = A)
               (new-r-coherence : MetaSubstitution.apply {env} (weakening {env} (inject-monochrome-term color new-r) SubList.sublist-trivial-free) SubList.identity new-subst = B)
               (FunctionalRoot {colored-env color} (Linear.convert-to-term {colored-env color} new-lp))
               (new-ms-eq : LinearMetaContext {colored-env color} new-lp = inner-mc)
               (new-sort-eq : s' = rule-s)
               (old-l = transport2 (Term env nil) new-sort-eq new-ms-eq (Linear.convert-to-injected-term color new-lp))
               (old-r = transport2 (Term env nil) new-sort-eq new-ms-eq (TheoremContext.inject-monochrome-term color new-r))
    \elim eq
      | idp => \case \elim inner-mc, \elim old-l, \elim old-r, \elim new-l-is-func, \elim ms-eq, \elim lp=l, \elim subst, \elim l-coherence, \elim r-coherence, \elim decomposed-r, \elim inject-r \with {
        | inner-mc, old-l, old-r, new-l-is-func, idp, idp, subst, l-coherence, r-coherence, decomposed-r, inject-r => (new-l, decomposed-r, subst, l-coherence, rewrite inject-r r-coherence, new-l-is-func, idp, idp, idp, inv inject-r)
      }

    \func coloring-lemma
      {tc : TheoremContext} {s s' : Sort'} {mc mc' : MetaContext Sort'}
      {context : List Sort'}
      (s-eq : s = s')
      (color : Color)
      (lp : LinearPattern (TheoremContext.colored-env color) nil s')
      (t : Term env nil s' mc)
      (froot : FunctionalRoot {env} t)
      (mc-eq : mc = LinearMetaContext {TheoremContext.colored-env color} lp)
      (eq : Linear.convert-to-injected-term color lp = transport (Term env nil s') mc-eq t)
      (msubst : MetaSubstitution env context mc mc')
      (f : env.symbol s)
      (choosing : \Pi (index : Index (env.domain f)) ->
          Term TheoremContext.env (context ++ f FSignature.!!param {env} index) (f FSignature.!!sort {env} index) mc')
      (eq2 : MetaSubstitution.apply {env} (weakening {env} t SubList.sublist-trivial-free) SubList.identity msubst = transport (Term env context __ mc') s-eq (func f choosing)) : \Sigma  (TheoremContext.color-of-root f = color) (TheoremContext.HasColoredRoot color t) \elim s-eq, color, lp, t, froot, mc-eq, f
      | idp, red, l-func f choosing1, func (inl a1) choosing2, T-has-functional-root, idp, inl a => (idp, TheoremContext.red-func-root)
      | idp, red, l-func f choosing1, func (inr b) choosing2, T-has-functional-root, idp, inl a => contradiction
      | idp, red, l-func f choosing1, func (inl a) choosing2, T-has-functional-root, idp, inr b => contradiction
      | idp, red, l-func f choosing1, func (inr b1) choosing2, T-has-functional-root, idp, inr b => contradiction
      | idp, red, l-full-metavar, func (inl a1) choosing1, T-has-functional-root, idp, inl a => (idp, TheoremContext.red-func-root)
      | idp, red, l-full-metavar, func (inr b) choosing1, T-has-functional-root, idp, inl a => (idp, contradiction)
      | idp, red, l-full-metavar, func (inl a) choosing1, T-has-functional-root, idp, inr b => contradiction
      | idp, red, l-full-metavar, func (inr b1) choosing1, T-has-functional-root, idp, inr b => contradiction
      | idp, blue, l-func f choosing1, func (inl a1) choosing2, T-has-functional-root, idp, inl a => contradiction
      | idp, blue, l-func f choosing1, func (inr b) choosing2, T-has-functional-root, idp, inl a => contradiction
      | idp, blue, l-func f choosing1, func (inl a) choosing2, T-has-functional-root, idp, inr b => contradiction
      | idp, blue, l-func f choosing1, func (inr b1) choosing2, T-has-functional-root, idp, inr b => (idp, TheoremContext.blue-func-root)
      | idp, blue, l-full-metavar, func (inl a1) choosing1, T-has-functional-root, idp, inl a => contradiction
      | idp, blue, l-full-metavar, func (inr b) choosing1, T-has-functional-root, idp, inl a => contradiction
      | idp, blue, l-full-metavar, func (inl a) choosing1, T-has-functional-root, idp, inr b => contradiction
      | idp, blue, l-full-metavar, func (inr b1) choosing1, T-has-functional-root, idp, inr b => (idp, TheoremContext.blue-func-root)
      | idp, _, l-var index p (), t, froot, mc-eq, f
  }

\func unembed-rewrite-relation {tc : TheoremContext} {context : List Sort'} {s : Sort'} {mc : MetaContext Sort'}
                               {gc : Color}
                               (color : Maybe Color)
                               {A B : Term env context s mc}
                               (A=>B : BorderedParallelReduction gc color A B)
  : Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)) A B \elim color, A, A=>B
  | color, A, equal-trees p => c-trivial p
  | color, func f choosing, parallelization-f mediator _x c =>
    \let | from-indices i => unembed-rewrite-relation (_x i).1 (_x i).3
         | joined => modular-induction
             (\lam index => Term env (context ++ f env.!!param index) (f env.!!sort index) mc)
             (\lam curmed => Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)) (func {env} f choosing) (func f curmed))
             choosing
             mediator
             (c-trivial idp)
             (\lam delim prev-result =>
                 \let | curmodular => from-indices delim
                      | modular => (modular-function
                          (\lam index => Term env (context ++ f env.!!param index) (f env.!!sort index) mc)
                          choosing mediator delim)
                      | lifted => Closure.lift {_} {_}
                          {RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)}
                          {RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)}
                          (collect-reductions-together-tlcr.insert-term {env} f modular delim)
                          (\lam {a} {b} a->b => rewrite-with-parameter-f idp delim (rewrite pointed-function.at-index (rewrite pointed-function.at-index a->b)) (\lam j _x1 => rewrite (pointed-function.not-at-index _ modular _ _ j _x1) (rewrite (pointed-function.not-at-index _ modular _ _ j _x1) idp)))
                          (choosing delim)
                          (mediator delim)
                          curmodular
                 \in Closure.concat prev-result (rewrite
                     (modular-to-pointed-forward (\lam index => Term env (context ++ f env.!!param  index) (f env.!!sort index) mc) choosing mediator)
                     (rewrite {1}
                         (modular-to-pointed (\lam index => Term env (context ++ f env.!!param  index) (f env.!!sort index) mc) choosing mediator delim)
                         lifted)))
         | from-cwr : Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)) (func {env} f mediator) B => unwrap-cwr color c
    \in Closure.concat joined from-cwr

\func unwrap-cwr {tc : TheoremContext} {context : List Sort'} {s : Sort'} {mc : MetaContext Sort'}
                 {gc : Color}
                 (color : Maybe Color)
                 {A B : Term env context s mc}
                 (A=>B : ColorwiseReduction gc color A B)
  : Closure (RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)) A B \elim color, A=>B
  | nothing, cr-skip idp => c-trivial idp
  | just color, cr-rewrite A->B p =>
    TClosure.to-closure
        (TClosure.lift {_} {_} {TopLevelColoredReduction color} {RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules)} (\lam x => x) (\lam {a} {b} tlcr => unembed-tlcr color tlcr) A B A->B)

\func unembed-tlcr {tc : TheoremContext} {context : List Sort'} {s : Sort'} {mc : MetaContext Sort'}
                   (color : Color)
                   {A B : Term env context s mc}
                   (A=>B : TopLevelColoredReduction color A B)
  : RewriteRelation {env} (JointRules {_} {envL} {envR} L-rules R-rules) A B \elim A, B, A=>B
  | A, B, rewrite-with-rule-colored h linear-pattern r l-is-func substitution left-coherence right-coherence idx seq' meq lcoh rcoh =>
      rewrite-with-rule idx seq' (rewriteI meq substitution)
          (untransport {env {tc}} seq' meq substitution _ _ A left-coherence lcoh)
          (untransport {env {tc}} seq' meq substitution _ _ B right-coherence rcoh)
  | func f-A choosing-A, func f-B choosing-B, rewrite-with-parameter-f-colored idp p1 index A=>B eq =>
    rewrite-with-parameter-f idp index (unembed-tlcr color A=>B) eq
  \where {
    \func untransport {env : FSignature} {s s' : Sort} {context : List Sort} {mc mc' mc'' : MetaContext Sort}
                      (eq1 : s = s') (eq2 : mc = mc')
                      (msubst : MetaSubstitution env context mc mc'')
                      (t : Term env nil s mc)
                      (u : Term env nil s' mc')
                      (A : Term env context s mc'')
                      (coh : MetaSubstitution.apply (weakening t SubList.sublist-trivial-free)  SubList.identity msubst = A)
                      (c2 : u = transport2 (\lam sort mcont => Term env nil sort mcont) eq1 eq2 t)
      : MetaSubstitution.apply (weakening u SubList.sublist-trivial-free) SubList.identity (transport (MetaSubstitution env context __ mc'') eq2 msubst) = transport (Term env context __ mc'') eq1 A \elim eq1, eq2, c2
      | idp, idp, idp => coh
  }

