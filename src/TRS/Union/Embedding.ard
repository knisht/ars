\import Data.List (!!, ++, List, length, nil)
\import Data.Maybe
\import Data.Or
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Relation
\import Set
\import TRS.Data.Fin
\import TRS.Data.SubList
\import TRS.HRS
\import TRS.Linearity
\import TRS.Maybe
\import TRS.MetaContexts
\import TRS.Substitutions
\import TRS.Union
\import TRS.Union.Colors
\import TRS.Union.Confluence
\import TRS.Utils

\open TheoremContext

\func fill-confluence
  {tc : TheoremContext} {context : List Sort'} {s : Sort'}
  (A B C : Term env context s (EmptyMetaContext {env}))
  (A~>B : Closure (RewriteRelation {env} JRegistry) A B)
  (A~>C : Closure (RewriteRelation {env} JRegistry) A C)
  (l-confluential : ConfluentialSystem envL L-rules)
  (r-confluential : ConfluentialSystem envR R-rules)
  : StraightJoin B C (Closure (RewriteRelation {env} JRegistry)) =>
  \let | lifted-a => Closure.lift
      {Term env context s (EmptyMetaContext {env})}
      {Term env context s (EmptyMetaContext {env})}
      {RewriteRelation {env} JRegistry}
      {TrichromaticParallelReduction}
      (\lam t => t)
      (\lam {x} {y} rel => Internal.embed-rewrite-relation x y rel) A B A~>B
       | lifted-b => Closure.lift
           {Term env context s (EmptyMetaContext {env})}
           {Term env context s (EmptyMetaContext {env})}
           {RewriteRelation {env} JRegistry}
           {TrichromaticParallelReduction}
           (\lam t => t)
           (\lam {x} {y} rel => Internal.embed-rewrite-relation x y rel) A C A~>C
       | joins => Internal.unify-reduction A B C lifted-a lifted-b (\lam a b c a->b a->c => \let (D, m1, m2, b->D, c->D) => bpr-confluence a->b.2 a->c.2 a->b.3 a->c.3 l-confluential r-confluential \in (D, (a->c.1, m1, b->D), (a->b.1, m2, c->D)))
       | long-closure-b-w => Closure.lift {_} {_}
           {TrichromaticParallelReduction}
           {Closure (RewriteRelation {env} JRegistry)}
           (\lam x => x)
           (\lam {a} {b} bpr => Internal.unembed-rewrite-relation bpr.2 bpr.3)
           B joins.1 joins.2
       | long-closure-c-w => Closure.lift {_} {_}
           {TrichromaticParallelReduction}
           {Closure (RewriteRelation {env} JRegistry)}
           (\lam x => x)
           (\lam {a} {b} bpr => Internal.unembed-rewrite-relation bpr.2 bpr.3)
           C joins.1 joins.3
  \in \new StraightJoin {
    | common-reduct => joins.1
    | a~>cr => Closure.flatten long-closure-b-w
    | b~>cr => Closure.flatten long-closure-c-w
  }

\module Internal \where {

  \func unify-reduction
    {A : \Type} {Rel : A -> A -> \Type} (x y z : A)
    (x->y : Closure Rel x y) (x->z : Closure Rel x z)
    (unifier : \Pi (a b c : A) (a->b : Rel a b) (a->c : Rel a c) -> \Sigma (d : A) (b->d : Rel b d) (c->d : Rel c d))
    : \Sigma (w : A) (y->w : Closure Rel y w) (z->w : Closure Rel z w) \elim x->y
    | c-trivial idp => (z, x->z, c-trivial idp)
    | c-basic x->y => unify-line x y z x->y x->z unifier
    | c-connect c x->c c->y => \let | (w, c->w, z->w) => unify-line x c z x->c x->z unifier
                                    | (w', y->w', w->w') => unify-reduction c y w c->y c->w unifier
                               \in (w', y->w', Closure.compose z->w w->w')
    \where {
      \func unify-line
        {A : \Type} {Rel : A -> A -> \Type} (x y z : A)
        (x->y : Rel x y) (x->z : Closure Rel x z)
        (unifier : \Pi (a b c : A) (a->b : Rel a b) (a->c : Rel a c) -> \Sigma (d : A) (b->d : Rel b d) (c->d : Rel c d))
        : \Sigma (w : A) (y->w : Closure Rel y w) (z->w : Closure Rel z w) \elim x->z
        | c-trivial idp => (y, c-trivial idp, c-basic x->y)
        | c-basic x->z => \let (w, y->w, z->w) => unifier x y z x->y x->z \in (w, c-basic y->w, c-basic z->w)
        | c-connect c x->c c->z =>
          \let | (w, y->w, c->w) => unifier x y c x->y x->c
               | (w', w->w', z->w') => unify-line c w z c->w c->z unifier
          \in (w', c-connect w y->w w->w', z->w')
    }

  \func embed-rewrite-relation {tc : TheoremContext} {context : List Sort'} {s : Sort'}
                               (A B : Term env context s (EmptyMetaContext {env}))
                               (A~>B : RewriteRelation {env} JRegistry A B)
    : TrichromaticParallelReduction A B \elim A, B, A~>B
    | var index p, B, rewrite-with-rule idx msubst l-coherence r-coherence => \let q => contradicting {env} index p msubst (JRegistry.rule-l idx) l-coherence (JRegistry.rule-func-root idx) \in contradiction
    | func f arguments1, B, rewrite-with-rule (inl idx) msubst l-coherence r-coherence
    =>
      \let | color-eq  => coloring-lemma red (bare-pattern' {_} {_} {red} idx) (JRegistry.rule-func-root (inl idx)) msubst f arguments1 l-coherence
      \in
        (color-of-root f,
         just red,
         parallelization-f
             arguments1
             (\lam i1 => (nothing, inl idp, equal-trees idp))
             (cr-rewrite (c-basic (rewrite-with-rule-colored
                 (infer-color-from-hcr red f arguments1 color-eq)
                 idx
                 msubst
                 (rewriteI l-coherence (rewrite (unwrap-injection {_} {red}) idp))
                 (rewriteI r-coherence idp))) color-eq))
    | func f arguments1, B, rewrite-with-rule (inr idx) msubst l-coherence r-coherence
    =>
      \let | color-eq  => coloring-lemma blue (bare-pattern' {_} {_} {blue} idx) (JRegistry.rule-func-root (inr idx)) msubst f arguments1 l-coherence
      \in
        (color-of-root f,
         just blue,
         parallelization-f
             arguments1
             (\lam i1 => (nothing, inl idp, equal-trees idp))
             (cr-rewrite (c-basic (rewrite-with-rule-colored
                 (infer-color-from-hcr blue f arguments1 color-eq)
                 idx
                 msubst
                 (rewriteI l-coherence (rewrite (unwrap-injection {_} {blue}) idp))
                 (rewriteI r-coherence idp))) color-eq))
    | func f-A arguments-A, func f-B arguments-B, rewrite-with-parameter-f idp index rd eq =>
      \let | (global-color, color, bpr) => embed-rewrite-relation (arguments-A index) (arguments-B index) rd
           | (someColor, mediator, inrd, cwr) => collect-reductions-together-raw {_} {_} {_} {_} {global-color} f-A arguments-A arguments-B (\lam i => \case (fin-eq-dec i index) \with {
             | yes e => rewrite e (color, bpr)
             | no n => (nothing, equal-trees (eq i n))
           })
      \in (global-color, someColor, parallelization-f mediator inrd cwr)
    | metavar () arguments-A, _, _
    \where {

      \func infer-color-from-hcr
        {tc : TheoremContext} {s : Sort'} {context : List Sort'} (color : Color) (f : env.symbol s)
        (arguments : DArray {env.arity f} (\lam index => Term TheoremContext.env (context ++ f FSignature.!!domain {env} index) (f FSignature.!!sort {env} index) (EmptyMetaContext {env})))
        (eq-color : color-of-root f = color) : TheoremContext.HasColoredRoot color (func {env} f arguments) \elim color, f, eq-color
        | red, inl a, eq-color => TheoremContext.red-func-root
        | blue, inr b, eq-color => TheoremContext.blue-func-root

      \func contradicting {env : FSignature} {context : List Sort} {s : Sort} {mc mc' : MetaContext Sort} (index : Index context) (p : s = context !! index) (msubst : MetaSubstitution env context mc mc')
                          (t : Term env nil s mc) (eq : MetaSubstitution.apply (weakening t SubList.sublist-trivial-free) SubList.identity msubst = var index p) (rt : FunctionRoot t) : Empty \elim t, rt
        | func f arguments, T-has-functional-root => contradiction

      \func coloring-lemma
        {tc : TheoremContext} {s : Sort'} {mc' : MetaContext Sort'}
        {context : List Sort'}
        (color : Color)
        (lp : LinearPattern (TheoremContext.colored-env color) nil s)
        (froot : FunctionRoot {env} (inject-monochrome-term color (Linear.convert-to-term {colored-env color} lp)))
        (msubst : MetaSubstitution env context (LinearMetaContext {colored-env color} lp) mc')
        (f : env.symbol s)
        (arguments : \Pi (index : Index (env.domain f)) ->
            Term TheoremContext.env (context ++ f FSignature.!!domain {env} index) (f FSignature.!!sort {env} index) mc')
        (eq2 : MetaSubstitution.apply {env} (weakening {env} (inject-monochrome-term color (Linear.convert-to-term {colored-env color} lp)) SubList.sublist-trivial-free) SubList.identity msubst = func f arguments) :
        TheoremContext.color-of-root f = color \elim color, lp, froot, f
        | red, l-func f arguments1, T-has-functional-root, inl a => idp
        | red, l-func f arguments1, T-has-functional-root, inr b => contradiction
        | blue, l-func f arguments1, T-has-functional-root, inl a => contradiction
        | blue, l-func f arguments1, T-has-functional-root, inr b => idp
        | _, l-var index p (), froot, f
    }

  \func unembed-rewrite-relation {tc : TheoremContext} {context : List Sort'} {s : Sort'} {mc : MetaContext Sort'}
                                 {gc : Color}
                                 (color : Maybe Color)
                                 {A B : Term env context s mc}
                                 (A=>B : BorderedParallelReduction gc color A B)
    : Closure (RewriteRelation {env} JRegistry) A B \elim color, A, A=>B
    | color, A, equal-trees p => c-trivial p
    | color, func f arguments, parallelization-f mediator _x c =>
      \let | from-indices i => unembed-rewrite-relation (_x i).1 (_x i).3
           | joined => modular-induction
               (\lam index => Term env (context ++ f env.!!domain index) (f env.!!sort index) mc)
               (\lam curmed => Closure (RewriteRelation {env} JRegistry) (efunc f arguments) (func f curmed))
               arguments
               mediator
               (c-trivial idp)
               (\lam delim prev-result =>
                   \let | curmodular => from-indices delim
                        | modular => modular-function
                            (\lam index => Term env (context ++ f env.!!domain index) (f env.!!sort index) mc)
                            arguments mediator delim
                        | lifted => Closure.lift {_} {_}
                            {RewriteRelation {env} JRegistry}
                            {RewriteRelation {env} JRegistry}
                            (collect-reductions-together-tlcr.insert-term {env} f modular delim)
                            (\lam {a} {b} a->b => rewrite-with-parameter-f idp delim (rewrite pointed-function.at-index (rewrite pointed-function.at-index a->b)) (\lam j _x1 => rewrite (pointed-function.not-at-index _ modular _ _ j _x1) (rewrite (pointed-function.not-at-index _ modular _ _ j _x1) idp)))
                            (arguments delim)
                            (mediator delim)
                            curmodular
                   \in Closure.compose prev-result (rewrite
                       (modular-to-pointed-forward (\lam index => Term env (context ++ f env.!!domain  index) (f env.!!sort index) mc) arguments mediator)
                       (rewrite {1}
                           (modular-to-pointed (\lam index => Term env (context ++ f env.!!domain  index) (f env.!!sort index) mc) arguments mediator delim)
                           lifted)))
           | from-cwr : Closure (RewriteRelation {env} JRegistry) (efunc f mediator) B => unwrap-cwr color c
      \in Closure.compose joined from-cwr

  \func unwrap-cwr {tc : TheoremContext} {context : List Sort'} {s : Sort'} {mc : MetaContext Sort'}
                   {gc : Color}
                   (color : Maybe Color)
                   {A B : Term env context s mc}
                   (A=>B : SwitchingReduction gc color A B)
    : Closure (RewriteRelation {env} JRegistry) A B \elim color, A=>B
    | nothing, cr-skip idp => c-trivial idp
    | just color, cr-rewrite A->B p =>
      Closure.lift {_} {_} {TopLevelColoredReduction color} {RewriteRelation {env} JRegistry} (\lam x => x) (\lam {a} {b} tlcr => unembed-tlcr color tlcr) A B A->B

  \func unembed-tlcr {tc : TheoremContext} {context : List Sort'} {s : Sort'} {mc : MetaContext Sort'}
                     (color : Color)
                     {A B : Term env context s mc}
                     (A=>B : TopLevelColoredReduction color A B)
    : RewriteRelation {env} JRegistry A B \elim color, A, B, A=>B
    | red, A, B, rewrite-with-rule-colored h idx substitution left-coherence right-coherence => \let q : Sort {env {tc}} = tc.Sort' => idp \in
      rewrite-with-rule (inl idx) substitution (rewrite (unwrap-injection {_} {red}) left-coherence) right-coherence
    | blue, A, B, rewrite-with-rule-colored h idx substitution left-coherence right-coherence => \let q : Sort {env {tc}} = tc.Sort' => idp \in
      rewrite-with-rule (inr idx) substitution (rewrite (unwrap-injection {_} {blue}) left-coherence) right-coherence
    | color, func f-A arguments-A, func f-B arguments-B, rewrite-with-parameter-f-colored idp p1 index A=>B eq =>
      rewrite-with-parameter-f idp index (unembed-tlcr color A=>B) eq

}

